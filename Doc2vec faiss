#!/usr/bin/env python
import numpy as np
import pickle
from gensim.models.doc2vec import Doc2Vec
import faiss
from nltk.tokenize import word_tokenize
import nltk
nltk.download('punkt')

EMBEDDINGS_FILE = 'doc2vec_embeddings.npy'
META_FILE = 'doc2vec_metadata.pkl'
DOC2VEC_MODEL_FILE = 'doc2vec_model.model'
SIMILARITY_THRESHOLD = 0.5  # Adjust threshold as needed.
embedding_dim = 100  # Must match the vector_size used in Doc2Vec.

def load_doc2vec_embeddings_and_metadata():
    embeddings = np.load(EMBEDDINGS_FILE)
    with open(META_FILE, 'rb') as f:
        metadata = pickle.load(f)
    return embeddings, metadata

def load_doc2vec_model():
    model = Doc2Vec.load(DOC2VEC_MODEL_FILE)
    return model

def build_faiss_index(embeddings, dimension):
    faiss.normalize_L2(embeddings)
    index = faiss.IndexHNSWFlat(dimension, 32, faiss.METRIC_INNER_PRODUCT)
    index.hnsw.efConstruction = 40
    index.add(embeddings)
    return index

def query_system():
    embeddings, metadata = load_doc2vec_embeddings_and_metadata()
    index = build_faiss_index(embeddings, embedding_dim)
    model = load_doc2vec_model()
    
    print("\nEnter new test case details (input can be incomplete):")
    new_user_story = input("New User Story: ").strip()
    new_acceptance_criteria = input("New Acceptance Criteria: ").strip()
    new_input_combined = f"User Story: {new_user_story} Acceptance Criteria: {new_acceptance_criteria}"
    tokens = word_tokenize(new_input_combined.lower())
    query_embedding = model.infer_vector(tokens).astype('float32')
    query_embedding = query_embedding.reshape(1, -1)
    faiss.normalize_L2(query_embedding)
    distances, indices = index.search(query_embedding, k=3)
    
    print("\nMatching stored test cases using Doc2Vec + FAISS (HNSW):\n")
    matches_found = False
    for score, idx in zip(distances[0], indices[0]):
        if score >= SIMILARITY_THRESHOLD:
            matches_found = True
            rec = metadata[idx]
            print(f"Match Found (Similarity Score: {score:.4f})")
            print(f"ID: {rec['id']}")
            print(f"User Story: {rec['user_story']}")
            print(f"Acceptance Criteria: {rec['acceptance_criteria']}\n")
    if not matches_found:
        print("No matches found above the similarity threshold.")

if __name__ == "__main__":
    query_system()
