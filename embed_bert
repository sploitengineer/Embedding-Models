#!/usr/bin/env python
import mysql.connector
from mysql.connector import Error
import numpy as np
import pickle
import torch
from transformers import AutoTokenizer, AutoModel

# ---------------- MySQL Configuration ----------------
MYSQL_CONFIG = {
    'host': 'localhost',
    'user': 'your_mysql_user',
    'password': 'your_mysql_password',
    'database': 'your_database_name'
}

TABLE_NAME = 'test_cases'
EMBEDDINGS_FILE = 'bert_embeddings.npy'
META_FILE = 'bert_metadata.pkl'

# Load the BERT model and tokenizer.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")
model = AutoModel.from_pretrained("bert-base-uncased")
embedding_dim = model.config.hidden_size  # typically 768 for bert-base-uncased

def create_connection():
    """Create and return a MySQL database connection."""
    try:
        connection = mysql.connector.connect(**MYSQL_CONFIG)
        if connection.is_connected():
            return connection
    except Error as e:
        print("Error while connecting to MySQL:", e)
    return None

def fetch_test_cases():
    """Fetch all test cases from the database."""
    connection = create_connection()
    records = []
    if connection:
        try:
            cursor = connection.cursor(dictionary=True)
            cursor.execute(f"SELECT id, user_story, acceptance_criteria FROM {TABLE_NAME}")
            records = cursor.fetchall()
            print(f"Fetched {len(records)} test cases from the database.")
        except Error as e:
            print("Error fetching data:", e)
        finally:
            cursor.close()
            connection.close()
    return records

def combine_text(record):
    """Combine user_story and acceptance_criteria from a record."""
    return f"User Story: {record['user_story']} Acceptance Criteria: {record['acceptance_criteria']}"

def mean_pooling(model_output, attention_mask):
    """
    Perform mean pooling on the token embeddings.
    This function computes the average of the token embeddings
    (taking the attention mask into account) to obtain a sentence embedding.
    """
    token_embeddings = model_output[0]  # shape: (batch_size, sequence_length, hidden_size)
    input_mask_expanded = attention_mask.unsqueeze(-1).expand(token_embeddings.size()).float()
    sum_embeddings = torch.sum(token_embeddings * input_mask_expanded, dim=1)
    sum_mask = torch.clamp(input_mask_expanded.sum(dim=1), min=1e-9)
    return sum_embeddings / sum_mask

def compute_and_save_bert_embeddings():
    test_cases = fetch_test_cases()
    if not test_cases:
        print("No test cases found. Exiting.")
        return

    embeddings = []
    metadata = []  # store details like id, combined text, etc.

    for tc in test_cases:
        combined = combine_text(tc)
        # Tokenize the input text.
        encoded_input = tokenizer(combined, padding=True, truncation=True, return_tensors='pt')
        # Compute token embeddings without gradient computation.
        with torch.no_grad():
            model_output = model(**encoded_input)
        # Apply mean pooling to get a fixed-size sentence embedding.
        sentence_embedding = mean_pooling(model_output, encoded_input['attention_mask'])
        # Convert to numpy array (assume batch_size=1).
        emb = sentence_embedding[0].numpy()
        embeddings.append(emb)
        metadata.append({
            'id': tc['id'],
            'combined': combined,
            'user_story': tc['user_story'],
            'acceptance_criteria': tc['acceptance_criteria']
        })

    embeddings = np.array(embeddings).astype('float32')
    np.save(EMBEDDINGS_FILE, embeddings)
    with open(META_FILE, 'wb') as f:
        pickle.dump(metadata, f)
    
    print(f"Saved {len(embeddings)} BERT embeddings to {EMBEDDINGS_FILE} and metadata to {META_FILE}.")

if __name__ == "__main__":
    compute_and_save_bert_embeddings()
