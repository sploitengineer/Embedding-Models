#!/usr/bin/env python
import numpy as np
import pickle
from sentence_transformers import SentenceTransformer
import faiss

# ---------------- Configuration ----------------
EMBEDDINGS_FILE = 'embeddings.npy'
META_FILE = 'metadata.pkl'
SIMILARITY_THRESHOLD = 0.7  # Cosine similarity threshold (0 to 1 scale)
embedding_dim = 384

# Initialize the embedding model.
model = SentenceTransformer('all-MiniLM-L6-v2')

def load_embeddings_and_metadata():
    embeddings = np.load(EMBEDDINGS_FILE)
    with open(META_FILE, 'rb') as f:
        metadata = pickle.load(f)
    return embeddings, metadata

def build_faiss_index(embeddings):
    # Normalize embeddings to use cosine similarity.
    faiss.normalize_L2(embeddings)
    
    # Build FAISS HNSW index.
    index = faiss.IndexHNSWFlat(embedding_dim, 32, faiss.METRIC_INNER_PRODUCT)
    index.hnsw.efConstruction = 40
    index.add(embeddings)
    return index

def search_index(index, query_embedding, k=3):
    query_embedding = np.array([query_embedding]).astype('float32')
    faiss.normalize_L2(query_embedding)
    distances, indices = index.search(query_embedding, k)
    return distances[0], indices[0]

def query_system():
    embeddings, metadata = load_embeddings_and_metadata()
    index = build_faiss_index(embeddings)
    
    print("\nEnter new test case details (input can be incomplete):")
    new_user_story = input("New User Story: ").strip()
    new_acceptance_criteria = input("New Acceptance Criteria: ").strip()
    new_input_combined = f"User Story: {new_user_story} Acceptance Criteria: {new_acceptance_criteria}"
    
    query_embedding = model.encode(new_input_combined)
    distances, indices = search_index(index, query_embedding, k=3)
    
    print("\nMatching stored test cases using all-MiniLM-L6-v2 + FAISS (HNSW):\n")
    matches_found = False
    for score, idx in zip(distances, indices):
        if score >= SIMILARITY_THRESHOLD:
            matches_found = True
            rec = metadata[idx]
            print(f"Match Found (Similarity Score: {score:.4f})")
            print(f"ID: {rec['id']}")
            print(f"User Story: {rec['user_story']}")
            print(f"Acceptance Criteria: {rec['acceptance_criteria']}\n")
    
    if not matches_found:
        print("No matches found above the similarity threshold.")

if __name__ == "__main__":
    query_system()
