#!/usr/bin/env python
import mysql.connector
from mysql.connector import Error
from simhash import Simhash
from rapidfuzz import fuzz

# ---------------- MySQL Configuration ----------------
MYSQL_CONFIG = {
    'host': 'localhost',
    'user': 'your_mysql_user',
    'password': 'your_mysql_password',
    'database': 'your_database_name'
}

TABLE_NAME = 'test_cases'

# Parameters for deduplication:
SIMHASH_THRESHOLD = 3      # Maximum Hamming distance allowed to consider two texts similar.
FUZZY_THRESHOLD = 85       # Fuzzy matching score threshold (out of 100).

def create_connection():
    """Create and return a MySQL database connection."""
    try:
        connection = mysql.connector.connect(**MYSQL_CONFIG)
        if connection.is_connected():
            return connection
    except Error as e:
        print("Error connecting to MySQL:", e)
    return None

def create_table():
    """Create the test_cases table if it doesn't exist."""
    create_table_query = f"""
        CREATE TABLE IF NOT EXISTS {TABLE_NAME} (
            id INT AUTO_INCREMENT PRIMARY KEY,
            user_story TEXT NOT NULL,
            acceptance_criteria TEXT NOT NULL
        );
    """
    connection = create_connection()
    if connection:
        try:
            cursor = connection.cursor()
            cursor.execute(create_table_query)
            connection.commit()
            print(f"Table '{TABLE_NAME}' ensured in database.")
        except Error as e:
            print("Error creating table:", e)
        finally:
            cursor.close()
            connection.close()

def insert_dummy_data():
    """Insert dummy test case data if the table is empty."""
    dummy_data = [
        ("User can log in with valid credentials", "Login should succeed when the username and password are correct."),
        ("User can sign in with valid credentials", "Login should succeed when the username and password are correct."),  # Similar to above.
        ("User can log in with correct credentials", "The system should allow login for valid users."),                   # Similar to above.
        ("User can reset password", "User should receive an email with instructions to reset the password."),
        ("User profile is editable", "User can update personal information and save changes.")
    ]
    
    connection = create_connection()
    if connection:
        try:
            cursor = connection.cursor()
            cursor.execute(f"SELECT COUNT(*) FROM {TABLE_NAME}")
            count = cursor.fetchone()[0]
            if count == 0:
                insert_query = f"INSERT INTO {TABLE_NAME} (user_story, acceptance_criteria) VALUES (%s, %s)"
                cursor.executemany(insert_query, dummy_data)
                connection.commit()
                print("Inserted dummy data into the table.")
            else:
                print("Table already has data; skipping dummy data insertion.")
        except Error as e:
            print("Error inserting dummy data:", e)
        finally:
            cursor.close()
            connection.close()

def fetch_test_cases():
    """Fetch all test cases from the database."""
    connection = create_connection()
    records = []
    if connection:
        try:
            cursor = connection.cursor(dictionary=True)
            cursor.execute(f"SELECT id, user_story, acceptance_criteria FROM {TABLE_NAME}")
            records = cursor.fetchall()
            print(f"Fetched {len(records)} test cases from the database.")
        except Error as e:
            print("Error fetching data:", e)
        finally:
            cursor.close()
            connection.close()
    return records

def combine_text(record):
    """Combine user_story and acceptance_criteria into one string."""
    return f"User Story: {record['user_story']} Acceptance Criteria: {record['acceptance_criteria']}"

def tokenize(text):
    """A simple tokenizer: lowercase and split on whitespace."""
    return text.lower().split()

def deduplicate_records_simhash(records, sim_threshold=SIMHASH_THRESHOLD, fuzzy_threshold=FUZZY_THRESHOLD):
    """
    Deduplicate records using Simhash as a pre-filter.
    Sort records by combined text length (descending). For each record,
    compute a Simhash fingerprint and compare it with already chosen representatives.
    If the Hamming distance is below 'sim_threshold', perform a fuzzy match;
    if the fuzzy score is above 'fuzzy_threshold', consider it a duplicate.
    """
    # Create new dicts that include the combined text.
    records_with_combined = [{**record, 'combined': combine_text(record)} for record in records]
    # Sort records: longer texts (more detail) first.
    records_sorted = sorted(records_with_combined, key=lambda r: len(r['combined']), reverse=True)
    
    deduplicated = []
    for rec in records_sorted:
        # Compute the Simhash for the record.
        sim = Simhash(tokenize(rec['combined']))
        duplicate_found = False
        # Compare against each representative's simhash.
        for rep in deduplicated:
            if sim.distance(rep['simhash']) <= sim_threshold:
                # If simhash is similar enough, perform a fuzzy string match.
                score = fuzz.token_set_ratio(rec['combined'], rep['combined'])
                if score >= fuzzy_threshold:
                    print(f"Record {rec['id']} is duplicate of {rep['id']} (Fuzzy Score: {score})")
                    duplicate_found = True
                    break
        if not duplicate_found:
            rec['simhash'] = sim  # Store the simhash with the record.
            deduplicated.append(rec)
            print(f"Record {rec['id']} added as representative.")
    return deduplicated

def main():
    # Uncomment these lines to create the table and insert dummy data if needed.
    # create_table()
    # insert_dummy_data()
    
    # Fetch test cases.
    records = fetch_test_cases()
    if not records:
        print("No test cases found. Exiting.")
        return
    
    # Deduplicate records using the Simhash pre-filter method.
    dedup_records = deduplicate_records_simhash(records)
    
    print("\nDeduplicated Records:")
    for rec in dedup_records:
        print(f"ID: {rec['id']} | Combined: {rec['combined']}\n")

if __name__ == "__main__":
    main()
